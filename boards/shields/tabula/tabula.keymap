#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

#define _CUT    &kp LC(X)
#define _COPY   &kp LC(C)
#define _PASTE  &kp LC(V)
#define TCUT    &kp LC(LS(X))
#define TCOPY   &kp LC(LS(C))
#define TPASTE  &kp LC(LS(V))

#define KEYS_LEFT_NUM     0  1  2  3  4  5
#define KEYS_LEFT_ABOVE  12 13 14 15 16 17
#define KEYS_LEFT_HOME   24 25 26 27 28 29 30
#define KEYS_LEFT_BELOW  38 39 40 41 42 43
#define KEYS_LEFT_THUMB1       50 51 52 53 54 55
#define KEYS_LEFT_THUMB2                      62

#define KEYS_RIGHT_NUM           6  7  8  9 10 11
#define KEYS_RIGHT_ABOVE        18 19 20 21 22 23
#define KEYS_RIGHT_HOME      31 32 33 34 35 36 37
#define KEYS_RIGHT_BELOW        44 45 46 47 48 49
#define KEYS_RIGHT_THUMB1 56 57 58 59 60 61
#define KEYS_RIGHT_THUMB2 63

#define KEYS_LEFT KEYS_LEFT_NUM KEYS_LEFT_ABOVE KEYS_LEFT_HOME KEYS_LEFT_BELOW KEYS_LEFT_THUMB1 KEYS_LEFT_THUMB2
#define KEYS_RIGHT KEYS_RIGHT_NUM KEYS_RIGHT_ABOVE KEYS_RIGHT_HOME KEYS_RIGHT_BELOW KEYS_RIGHT_THUMB1 KEYS_RIGHT_THUMB2

&sl {
    release-after-ms = <1000>;
};

/ {
    behaviors {
        tdSHFT: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LSHFT>, <&caps_word>;
        };
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_RIGHT>;
            hold-trigger-on-release;
        };
        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_LEFT>;
            hold-trigger-on-release;
        };
    };


    keymap {
        compatible = "zmk,keymap";

        /* https://zmk.dev/docs/keymaps/list-of-keycodes */
        default_layer {
            bindings = <
&kp ESC   &kp N1 &kp N2   &kp N3     &kp N4   &kp N5                                                   &kp N6     &kp N7    &kp N8    &kp N9   &kp N0   &kp BSPC
&kp TAB   &kp Q  &kp W    &kp E      &kp R    &kp T                                                    &kp Y      &kp U     &kp I     &kp O    &kp P    &kp BSLH
&kp LCTRL &kp A  &kp S    &kp D      &kp F    &kp G    &kp C_MUTE                            &kp PSCRN &kp H      &kp J     &kp K     &kp L    &kp SEMI &kp ENTER
&tdSHFT   &kp Z  &kp X    &kp C      &kp V    &kp B                                                    &kp N      &kp M     &kp COMMA &kp DOT  &kp FSLH &tdSHFT
                 &kp LGUI &kp DEL   &sl 2    &kp LALT &tdSHFT    &kp DEL           &none     &sl 1     &kp SPACE  &kp ENTER &kp DEL   &kp BSPC
                                                                 &mo 3             &mo 3
            >;
        };
        symbols_layer {
            bindings = <
&trans    &kp EXCL &kp AT    &kp POUND &kp DLLR  &kp PRCNT                                                 &none      &none   &none   &none   &none   &trans
&trans    &none    &kp TILDE &kp DQT   &kp UNDER &kp PLUS                                                  &none      &none   &none   &none   &none   &trans
&trans    &none    &kp GRAVE &kp APOS  &kp MINUS &kp EQUAL &none                                &none      &none      &none   &none   &none   &none   &trans
&trans    &none    &kp LBRC  &kp RBRC  &kp LBKT  &kp RBKT                                                  &none      &none   &none   &none   &none   &trans
                   &trans    &none     &trans    &trans    &trans    &none             &none    &trans     &kp SPACE  &trans  &trans  &trans
                                                                     &none             &none
            >;
        };
        navigation_layer {
            bindings = <
&trans    &none    &none     &none     &none     &none                                                  &none     &none     &none     &none     &none    &trans
&trans    &none    &none     &none     &none     &none                                                  &none     &kp HOME  &kp END   &none     &none    &trans
&trans    &none    TCUT      TCOPY     TPASTE    &none     &none                                &none   &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT &none    &trans
&trans    &none    _CUT      _COPY     _PASTE    &none                                                  &none     &none     &none     &none     &none    &trans
                   &trans    &none     &trans    &trans    &trans   &none             &none     &trans  &kp SPACE &trans    &trans    &trans
                                                                    &none             &none
            >;
        };
        functional_layer {
            bindings = <
&kp F1     &kp F2       &kp F3       &kp F4       &kp F5       &kp F6                                            &kp F7    &kp F8    &kp F9    &kp F10   &kp F11  &kp F12
&none      &none        &none        &none        &none        &none                                             &none     &kp N7    &kp N8    &kp N9    &none    &none
&bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none                       &none    &none     &kp N4    &kp N5    &kp N6    &none    &none
&none      &none        &none        &none        &none        &none                                             &kp N0    &kp N1    &kp N2    &kp N3    &none    &none
                        &none        &none        &none        &none        &none    &none     &none    &none    &none     &kp N0    &kp N0    &none
                                                                                     &none     &none
            >;
        };
    };
};
